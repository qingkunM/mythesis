% Generated by BUPTThesis.bst, version: 1.0 Beta 1 (2009/05/31)
\begin{thebibliography}{100}

\bibitem{noauthor_autodafe_nodate}
Autodafe.
\url{http://autodafe.sourceforge.net/}.

\bibitem{noauthor_78_nodate}
78\% of {Companies} {Run} on {Open} {Source} {Yet} {Lack} {Formal} {Policies}.
\url{https://www.blackducksoftware.com/de/node/1011}.

\bibitem{williams_unfortunate_2012}
Williams~J, Dabirsiaghi~A.
The unfortunate reality of insecure libraries~[J].
Asp. Secur. Inc.
2012:  1--26.

\bibitem{wnoauthor_cern_nodate}
{CERN} {Computer} {Security} {Information}.
\url{https://security.web.cern.ch/security/recommendations/en/codetools/rats.shtml}.

\bibitem{noauthor_its4_nodate}
{ITS}4.
\url{http://seclab.cs.ucdavis.edu/projects/testing/tools/its4.html}.

\bibitem{flawfinder_nodate}
Flawfinder {Home} {Page}.
\url{https://www.dwheeler.com/flawfinder/}.

\bibitem{leino_esc/java_2000}
Leino~K R~M, Nelson~G, Saxe~J~B.
{ESC}/{Java} user's manual~[J].
ESC.
2000, 2000:  002.

\bibitem{dor_cssv:_2003}
Dor~N, Rodeh~M, Sagiv~M.
{CSSV}: {Towards} a realistic tool for statically detecting all buffer
  overflows in {C}~[C].
In {ACM} {Sigplan} {Notices}.
2003:  155--167.

\bibitem{chen_interval_2009}
Chen~L, Miné~A, Wang~J, et~al.
Interval polyhedra: {An} abstract domain to infer interval linear
  relationships~[J].
Static Analysis.
2009:  309--325.

\bibitem{logozzo_pentagons:_2008}
Logozzo~F, Fähndrich~M.
Pentagons: a weakly relational abstract domain for the efficient validation of
  array accesses~[C].
In Proceedings of the 2008 {ACM} symposium on {Applied} computing.
2008:  184--188.

\bibitem{mine_octagon_2006}
Miné~A.
The octagon abstract domain~[J].
Higher-order and symbolic computation.
2006, 19~(1):  31--100.

\bibitem{cousot_astree_2007}
Cousot~P.
The astrée static analysis tool~[C].
In {ES} {PASS} {Workshop}, {Berlin}, {Germany}.
2007:  16--17.

\bibitem{kastner_efficient_2011}
Kästner~D, Ferdinand~C.
Efficient verification of non-functional safety properties by abstract
  interpretation: {Timing}, stack consumption, and absence of runtime
  errors~[C].
In Proceedings of the 29th {International} {System} {Safety} {Conference}
  {ISSC}2011, {Las} {Vegas}.
2011.

\bibitem{delmas_towards_2009}
Delmas~D, Goubault~E, Putot~S, et~al.
Towards an industrial use of {FLUCTUAT} on safety-critical avionics
  software~[C].
In International {Workshop} on {Formal} {Methods} for {Industrial} {Critical}
  {Systems}.
2009:  53--69.

\bibitem{noauthor_code_nodate}
Code {Contracts} for .{NET} - {Visual} {Studio} {Marketplace}.
\url{https://marketplace.visualstudio.com/items?itemName=RiSEResearchinSoftwareEngineering.CodeContractsforNET}.

\bibitem{rfleming_codesonar_2015}
rfleming．
{CodeSonar}.
October 2015．
\url{https://www.grammatech.com/products/codesonar}.

\bibitem{almossawi_analysis_2006}
Almossawi~A, Lim~K, Sinha~T.
Analysis tool evaluation: {Coverity} prevent~[J].
Pittsburgh, PA: Carnegie Mellon University.
2006.

\bibitem{noauthor_boon_nodate}
{BOON}.
\url{http://people.eecs.berkeley.edu/~daw/boon/}.

\bibitem{king_symbolic_1976}
King~J~C.
Symbolic execution and program testing~[J].
Communications of the ACM.
1976, 19~(7):  385--394.

\bibitem{das_esp:_2002}
Das~M, Lerner~S, Seigle~M.
{ESP}: {Path}-sensitive program verification in polynomial time~[C].
In {ACM} {Sigplan} {Notices}.
2002:  57--68.

\bibitem{bush_static_2000}
Bush~W~R, Pincus~J~D, Sielaff~D~J.
A static analyzer for finding dynamic programming errors~[J].
Software-practice and Experience.
2000, 30~(7):  775--802.

\bibitem{noauthor_prefast_nodate}
{PREfast} {Overview} ({Windows} {CE} 5.0).
\url{https://msdn.microsoft.com/en-us/library/aa448765.aspx}.

\bibitem{chen_mops:_2002}
Chen~H, Wagner~D.
{MOPS}: an infrastructure for examining security properties of software~[C].
In Proceedings of the 9th {ACM} conference on {Computer} and communications
  security.
2002:  235--244.

\bibitem{holzmann_static_2002}
Holzmann~G~J.
Static source code checking for user-defined properties~[C].
In Proc. {IDPT}.
2002.

\bibitem{noauthor_slam_nodate}
{SLAM}.
\url{https://www.microsoft.com/en-us/research/project/slam/}.

\bibitem{noauthor_spin_nodate}
Spin - {Formal} {Verification}.
\url{http://spinroot.com/spin/whatispin.html}.

\bibitem{noauthor_cbmc_nodate}
The {CBMC} {Homepage}.
\url{http://www.cprover.org/cbmc/}.

\bibitem{beyer_software_2007}
Beyer~D, Henzinger~T~A, Jhala~R, et~al.
The software model checker {Blast}~[J].
International Journal on Software Tools for Technology Transfer.
2007, 9~(5-6):  505--525.

\bibitem{andraus_cegar-based_2007}
Andraus~Z~S, Liffiton~M~H, Sakallah~K~A.
{CEGAR}-based formal hardware verification: {A} case study~[J].
Ann Arbor.
2007, 1001:  48109--2122.

\bibitem{padmanabhuni_predicting_2014}
Padmanabhuni~B~M, Tan~H B~K.
Predicting {Buffer} {Overflow} {Vulnerabilities} through {Mining}
  {Light}-{Weight} {Static} {Code} {Attributes}~[C].
In Software {Reliability} {Engineering} {Workshops} ({ISSREW}), 2014 {IEEE}
  {International} {Symposium} on.
2014:  317--322.

\bibitem{padmanabhuni_auditing_2016}
Padmanabhuni~B~M, Tan~H B~K.
Auditing buffer overflow vulnerabilities using hybrid static–dynamic
  analysis~[J].
IET Software.
2016, 10~(2):  54--61.

\bibitem{neuhaus_predicting_2007}
Neuhaus~S, Zimmermann~T, Holler~C, et~al.
Predicting vulnerable software components~[C].
In Proceedings of the 14th {ACM} conference on {Computer} and communications
  security.
2007:  529--540.

\bibitem{zimmermann_searching_2010}
Zimmermann~T, Nagappan~N, Williams~L.
Searching for a needle in a haystack: {Predicting} security vulnerabilities for
  windows vista~[C].
In Software {Testing}, {Verification} and {Validation} ({ICST}), 2010 {Third}
  {International} {Conference} on.
2010:  421--428.

\bibitem{perl_vccfinder:_2015}
Perl~H, Dechand~S, Smith~M, et~al.
Vccfinder: {Finding} potential vulnerabilities in open-source projects to
  assist code audits~[C].
In Proceedings of the 22nd {ACM} {SIGSAC} {Conference} on {Computer} and
  {Communications} {Security}.
2015:  426--437.

\bibitem{grieco_toward_2016}
Grieco~G, Grinblat~G~L, Uzal~L, et~al.
Toward large-scale vulnerability discovery using {Machine} {Learning}~[C].
In Proceedings of the {Sixth} {ACM} {Conference} on {Data} and {Application}
  {Security} and {Privacy}.
2016:  85--96.

\bibitem{yamaguchi_chucky:_2013}
Yamaguchi~F, Wressnegger~C, Gascon~H, et~al.
Chucky: {Exposing} missing checks in source code for vulnerability
  discovery~[C].
In Proceedings of the 2013 {ACM} {SIGSAC} conference on {Computer} \&
  communications security.
2013:  499--510.

\bibitem{yamaguchi_automatic_2015}
Yamaguchi~F, Maier~A, Gascon~H, et~al.
Automatic inference of search patterns for taint-style vulnerabilities~[C].
In Security and {Privacy} ({SP}), 2015 {IEEE} {Symposium} on.
2015:  797--812.

\bibitem{rajpal_not_2017}
Rajpal~M, Blum~W, Singh~R.
Not all bytes are equal: {Neural} byte sieve for fuzzing~[J].
arXiv preprint arXiv:1711.04596.
2017.

\bibitem{martin_finding_2005}
Martin~M, Livshits~B, Lam~M~S.
Finding application errors and security flaws using {PQL}: a program query
  language~[C].
In {ACM} {SIGPLAN} {Notices}.
2005:  365--383.

\bibitem{godefroid_dart:_2005}
Godefroid~P, Klarlund~N, Sen~K.
{DART}: directed automated random testing~[C].
In {ACM} {Sigplan} {Notices}.
2005:  213--223.

\bibitem{sen_cute_2006}
Sen~K, Agha~G.
{CUTE} and {jCUTE}: {Concolic} unit testing and explicit path model-checking
  tools~[C].
In {CAV}.
2006:  419--423.

\bibitem{cadar_exe:_2008}
Cadar~C, Ganesh~V, Pawlowski~P~M, et~al.
{EXE}: automatically generating inputs of death~[J].
ACM Transactions on Information and System Security (TISSEC).
2008, 12~(2): ~10.

\bibitem{cadar_klee:_2008}
Cadar~C, Dunbar~D, Engler~D~R.
{KLEE}: {Unassisted} and {Automatic} {Generation} of {High}-{Coverage} {Tests}
  for {Complex} {Systems} {Programs}.~[C].
In {OSDI}.
2008:  209--224.

\bibitem{noauthor_llvm_nodate}
The {LLVM} {Compiler} {Infrastructure} {Project}.
\url{https://llvm.org/}.

\bibitem{godefroid_sage:_2012}
Godefroid~P, Levin~M~Y, Molnar~D.
{SAGE}: whitebox fuzzing for security testing~[J].
Queue.
2012, 10: ~20.

\bibitem{molnar_dynamic_2009}
Molnar~D, Li~X~C, Wagner~D.
Dynamic {Test} {Generation} to {Find} {Integer} {Bugs} in x86 {Binary} {Linux}
  {Programs}.~[C].
In {USENIX} {Security} {Symposium}.
2009:  67--82.

\bibitem{hunter__2010}
{李根}.
基于动态测试用例生成的二进制软件缺陷自动发掘技术研究
  [{D}]~[D].
[S.~l.]: 长沙: 国防科学技术大学, 2010.

\bibitem{godefroid_higher-order_2011}
Godefroid~P.
Higher-order test generation~[C].
In {ACM} {SIGPLAN} {Notices}.
2011:  258--269.

\bibitem{majumdar_directed_2007}
Majumdar~R, Xu~R-G.
Directed test generation using symbolic grammars~[C].
In Proceedings of the twenty-second {IEEE}/{ACM} international conference on
  {Automated} software engineering.
2007:  134--143.

\bibitem{godefroid_grammar-based_2008}
Godefroid~P, Kiezun~A, Levin~M~Y.
Grammar-based whitebox fuzzing~[C].
In {ACM} {Sigplan} {Notices}.
2008:  206--215.

\bibitem{boonstoppel_rwset:_2008}
Boonstoppel~P, Cadar~C, Engler~D.
{RWset}: {Attacking} path explosion in constraint-based test generation~[J].
Tools and Algorithms for the Construction and Analysis of Systems.
2008:  351--366.

\bibitem{godefroid_compositional_2010}
Godefroid~P, Nori~A~V, Rajamani~S~K, et~al.
Compositional may-must program analysis: unleashing the power of
  alternation~[C].
In {ACM} {Sigplan} {Notices}.
2010:  43--56.

\bibitem{trtik_symbolic_2014}
Trtík~M.
Symbolic execution and program loops~[D].
[S.~l.]: Masarykova univerzita, Fakulta informatiky, 2014.

\bibitem{godefroid_automatic_2011}
Godefroid~P, Luchaup~D.
Automatic partial loop summarization in dynamic test geneation~[C].
In Proceedings of the 2011 {International} {Symposium} on {Software} {Testing}
  and {Analysis}.
2011:  23--33.

\bibitem{chipounov_s2e:_2011}
Chipounov~V, Kuznetsov~V, Candea~G.
S2E: {A} platform for in-vivo multi-path analysis of software systems~[J].
ACM SIGPLAN Notices.
2011, 46~(3):  265--278.

\bibitem{ma_directed_2011}
Ma~K-K, Yit~Phang~K, Foster~J, et~al.
Directed symbolic execution~[J].
Static Analysis.
2011:  95--111.

\bibitem{haller_dowsing_2013}
Haller~I, Slowinska~A, Neugschwandtner~M, et~al.
Dowsing for {Overflows}: {A} {Guided} {Fuzzer} to {Find} {Buffer} {Boundary}
  {Violations}.~[C].
In {USENIX} {Security} {Symposium}.
2013:  49--64.

\bibitem{bohme_partition-based_2013}
Böhme~M, Oliveira~B C d~S, Roychoudhury~A.
Partition-based regression verification~[C].
In Proceedings of the 2013 {International} {Conference} on {Software}
  {Engineering}.
2013:  302--311.

\bibitem{marinescu_katch:_2013}
Marinescu~P~D, Cadar~C.
{KATCH}: high-coverage testing of software patches~[C].
In Proceedings of the 2013 9th {Joint} {Meeting} on {Foundations} of {Software}
  {Engineering}.
2013:  235--245.

\bibitem{miller_empirical_1990}
Miller~B~P, Fredriksen~L, So~B.
An empirical study of the reliability of {UNIX} utilities~[J].
Communications of the ACM.
1990, 33~(12):  32--44.

\bibitem{xu_directed_2010}
Xu~Z, Kim~Y, Kim~M, et~al.
Directed test suite augmentation: techniques and tradeoffs~[C].
In Proceedings of the eighteenth {ACM} {SIGSOFT} international symposium on
  {Foundations} of software engineering.
2010:  257--266.

\bibitem{christakis_guiding_2016}
Christakis~M, Müller~P, Wüstholz~V.
Guiding dynamic symbolic execution toward unverified program executions~[C].
In Proceedings of the 38th {International} {Conference} on {Software}
  {Engineering}.
2016:  144--155.

\bibitem{jin_bugredux:_2012}
Jin~W, Orso~A.
{BugRedux}: reproducing field failures for in-house debugging~[C].
In Software {Engineering} ({ICSE}), 2012 34th {International} {Conference} on.
2012:  474--484.

\bibitem{ros_sler_reconstructing_2013}
Rö{\textbackslash}s~sler~J, Zeller~A, Fraser~G, et~al.
Reconstructing core dumps~[C].
In Software {Testing}, {Verification} and {Validation} ({ICST}), 2013 {IEEE}
  {Sixth} {International} {Conference} on.
2013:  114--123.

\bibitem{noauthor_zzuf_nodate}
zzuf – {Caca} {Labs}.
\url{http://caca.zoy.org/wiki/zzuf}.

\bibitem{noauthor_peach_nodate}
Peach {Platform}.
\url{https://www.peach.tech/products/peach-fuzzer/peach-platform/}.

\bibitem{noauthor_immunity_nodate}
Immunity {Inc}. {\textbar} {Knowing} {You}'re {Secure}.
\url{http://www.immunitysec.com/}.

\bibitem{li_automatic_2011}
Li~W-M, Zhang~A-F, Liu~J-C, et~al.
An automatic network protocol fuzz testing and vulnerability discovering
  method~[J].
Jisuanji Xuebao(Chinese Journal of Computers).
2011, 34~(2):  242--255.

\bibitem{kim_efficient_2011}
Kim~H~C, Choi~Y~H, Lee~D~H.
Efficient file fuzz testing using automated analysis of binary file format~[J].
Journal of Systems Architecture.
2011, 57~(3):  259--268.

\bibitem{gorbunov_autofuzz:_2010}
Gorbunov~S, Rosenbloom~A.
Autofuzz: {Automated} network protocol fuzzing framework~[J].
IJCSNS.
2010, 10~(8):  239.

\bibitem{lin_automatic_2010}
Lin~Z, Zhang~X, Xu~D.
Automatic reverse engineering of data structures from binary execution~[C].
In Proceedings of the 11th {Annual} {Information} {Security} {Symposium}.
2010: ~5.

\bibitem{wang_taintscope:_2010}
Wang~T, Wei~T, Gu~G, et~al.
{TaintScope}: {A} checksum-aware directed fuzzing tool for automatic software
  vulnerability detection~[C].
In Security and privacy ({SP}), 2010 {IEEE} symposium on.
2010:  497--512.

\bibitem{sharma_applying_2014}
Sharma~C, Sabharwal~S, Sibal~R.
Applying genetic algorithm for prioritization of test case scenarios derived
  from {UML} diagrams~[J].
arXiv preprint arXiv:1410.4838.
2014.

\bibitem{sabharwal_prioritization_2010}
Sabharwal~S, Sibal~R, Sharma~C.
Prioritization of test case scenarios derived from activity diagram using
  genetic algorithm~[C].
In Computer and {Communication} {Technology} ({ICCCT}), 2010 {International}
  {Conference} on.
2010:  481--485.

\bibitem{you_genetic_2012}
You~L, Lu~Y.
A genetic algorithm for the time-aware regression testing reduction
  problem~[C].
In Natural {Computation} ({ICNC}), 2012 {Eighth} {International} {Conference}
  on.
2012:  596--599.

\bibitem{patton_genetic_2003}
Patton~R~M, Wu~A~S, Walton~G~H.
A genetic algorithm approach to focused software usage testing~[J].
Software Engineering with Computational Intelligence.
2003:  259--286.

\bibitem{bohme_coverage-based_2016}
Böhme~M, Pham~V-T, Roychoudhury~A.
Coverage-based greybox fuzzing as markov chain~[C].
In Proceedings of the 2016 {ACM} {SIGSAC} {Conference} on {Computer} and
  {Communications} {Security}.
2016:  1032--1043.

\bibitem{noauthor_american_nodate}
american fuzzy lop.
\url{http://lcamtuf.coredump.cx/afl/}.

\bibitem{rawat_vuzzer:_2017}
Rawat~S, Jain~V, Kumar~A, et~al.
Vuzzer: {Application}-aware evolutionary fuzzing~[C].
In Proceedings of the {Network} and {Distributed} {System} {Security}
  {Symposium} ({NDSS}).
2017.

\bibitem{sparks_automated_2007}
Sparks~S, Embleton~S, Cunningham~R, et~al.
Automated vulnerability analysis: {Leveraging} control flow for evolutionary
  input crafting~[C].
In Computer {Security} {Applications} {Conference}, 2007. {ACSAC} 2007.
  {Twenty}-{Third} {Annual}.
2007:  477--486.

\bibitem{noauthor_libfuzzer_nodate}
{libFuzzer} – a library for coverage-guided fuzz testing. — {LLVM} 6
  documentation.
\url{https://llvm.org/docs/LibFuzzer.html}.

\bibitem{bohme_directed_2017}
Böhme~M, Pham~V-T, Nguyen~M-D, et~al.
Directed greybox fuzzing~[C].
In Proceedings of the 2017 {ACM} {SIGSAC} {Conference} on {Computer} and
  {Communications} {Security} ({CCS}’17).
2017.

\bibitem{henderson_decaf:_2017}
Henderson~A, Yan~L~K, Hu~X, et~al.
{DECAF}: {A} {Platform}-{Neutral} {Whole}-{System} {Dynamic} {Binary}
  {Analysis} {Platform}~[J].
IEEE Transactions on Software Engineering.
2017, 43~(2):  164--184.

\bibitem{newsome_dynamic_2005}
Newsome~J, Song~D.
Dynamic taint analysis: {Automatic} detection, analysis, and signature
  generation of exploit attacks on commodity software~[C].
In In {In} {Proceedings} of the 12th {Network} and {Distributed} {Systems}
  {Security} {Symposium}.
2005.

\bibitem{zhangliyong_2011}
{张立勇}.
软件源代码安全分析研究~[D].
[S.~l.]: 西安: 西安电子科技大学, 2011.

\bibitem{ashcraft_using_2002}
Ashcraft~K, Engler~D.
Using programmer-written compiler extensions to catch security holes~[C].
In Security and {Privacy}, 2002. {Proceedings}. 2002 {IEEE} {Symposium} on.
2002:  143--159.

\bibitem{gregor_stllint:_2006}
Gregor~D, Schupp~S.
{STLlint}: lifting static checking from languages to libraries~[J].
Software: Practice and Experience.
2006, 36~(3):  225--254.

\bibitem{noauthor_splint_nodate}
Splint {Home} {Page}.
\url{http://lclint.cs.virginia.edu/}.

\bibitem{baxter_clone_1998}
Baxter~I~D, Yahin~A, Moura~L, et~al.
Clone detection using abstract syntax trees~[C].
In Software {Maintenance}, 1998. {Proceedings}., {International} {Conference}
  on.
1998:  368--377.

\bibitem{yamaguchi_generalized_2012}
Yamaguchi~F, Lottmann~M, Rieck~K.
Generalized vulnerability extrapolation using abstract syntax trees~[C].
In Proceedings of the 28th {Annual} {Computer} {Security} {Applications}
  {Conference}.
2012:  359--368.

\bibitem{gascon_structural_2013}
Gascon~H, Yamaguchi~F, Arp~D, et~al.
Structural detection of android malware using embedded call graphs~[C].
In Proceedings of the 2013 {ACM} workshop on {Artificial} intelligence and
  security.
2013:  45--54.

\bibitem{yamaguchi_modeling_2014}
Yamaguchi~F, Golde~N, Arp~D, et~al.
Modeling and discovering vulnerabilities with code property graphs~[C].
In Security and {Privacy} ({SP}), 2014 {IEEE} {Symposium} on.
2014:  590--604.

\bibitem{rice_classes_1953}
Rice~H~G.
Classes of recursively enumerable sets and their decision problems~[J].
Transactions of the American Mathematical Society.
1953, 74~(2):  358--366.

\bibitem{heelan_vulnerability_2011}
Heelan~S.
Vulnerability detection systems: {Think} cyborg, not robot~[J].
IEEE Security \& Privacy.
2011, 9~(3):  74--77.

\bibitem{dekok_pscan:_2000}
DeKok~A.
{PScan}: {A} limited problem scanner for {C} source files~[M].
2000.

\bibitem{rodriguez_graph_2010}
Rodriguez~M~A, Neubauer~P.
The graph traversal pattern~[J].
arXiv preprint arXiv:1004.1001.
2010.

\bibitem{parr_definitive_2013}
Parr~T.
The definitive {ANTLR} 4 reference~[M].
Pragmatic Bookshelf, 2013.

\bibitem{moonen_generating_2001}
Moonen~L.
Generating robust parsers using island grammars~[C].
In Reverse {Engineering}, 2001. {Proceedings}. {Eighth} {Working} {Conference}
  on.
2001:  13--22.

\bibitem{noauthor_neo4j_nodate}
The {Neo}4j {Graph} {Platform} – {The} \#1 {Platform} for {Connected} {Data}.
\url{https://neo4j.com/}.

\bibitem{noauthor_titan:_nodate}
Titan: {Distributed} {Graph} {Database}.
\url{http://titan.thinkaurelius.com/}.

\bibitem{noauthor_newsletter_nodate}
Newsletter signup.
\url{https://forms.zohopublic.com/OrientDB/form/Newslettersignup/formperma/HKbGjh2333Ae53AC84bFdeCDg}.

\bibitem{gremlin}
gremlin.
\url{http://github.com/tinkerpop/gremlin/}.

\bibitem{noauthor_cve_nodate}
{CVE}-2016-9537.
\url{https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-953}.

\bibitem{rodriguez_gremlin_2015}
Rodriguez~M~A.
The gremlin graph traversal machine and language (invited talk)~[C].
In Proceedings of the 15th {Symposium} on {Database} {Programming} {Languages}.
2015:  1--10.

\bibitem{noauthor_a2ps_nodate}
a2ps - {GNU} {Project} - {Free} {Software} {Foundation} ({FSF}).
\url{https://www.gnu.org/software/a2ps/#TOCdownloading}.

\bibitem{kratkiewicz_evaluating_2005}
Kratkiewicz~K~J.
Evaluating static analysis tools for detecting buffer overflows in c code~[R].
2005.

\bibitem{zitser_testing_2004}
Zitser~M, Lippmann~R, Leek~T.
Testing static analysis tools using exploitable buffer overflows from open
  source code~[C].
In {ACM} {SIGSOFT} {Software} {Engineering} {Notes}.
2004:  97--106.

\bibitem{stehman_selecting_1997}
Stehman~S~V.
Selecting and interpreting measures of thematic classification accuracy~[J].
Remote sensing of Environment.
1997, 62~(1):  77--89.

\bibitem{santelices_test-suite_2008}
Santelices~R, Chittimalli~P~K, Apiwattanapong~T, et~al.
Test-suite augmentation for evolving software~[C].
In Proceedings of the 2008 23rd {IEEE}/{ACM} {International} {Conference} on
  {Automated} {Software} {Engineering}.
2008:  218--227.

\bibitem{person_directed_2011}
Person~S, Yang~G, Rungta~N, et~al.
Directed incremental symbolic execution~[C].
In {ACM} {SIGPLAN} {Notices}.
2011:  504--515.

\bibitem{bohme_regression_2013}
Böhme~M, Oliveira~B C d~S, Roychoudhury~A.
Regression tests to expose change interaction errors~[C].
In Proceedings of the 2013 9th {Joint} {Meeting} on {Foundations} of {Software}
  {Engineering}.
2013:  334--344.

\bibitem{baldoni_survey_2016}
Baldoni~R, Coppa~E, D'Elia~D~C, et~al.
A survey of symbolic execution techniques~[J].
arXiv preprint arXiv:1610.00502.
2016.

\bibitem{noauthor_writing_nodate}
Writing an {LLVM} {Pass} — {LLVM} 7 documentation.
\url{https://llvm.org/docs/WritingAnLLVMPass.html}.

\bibitem{rodriguez_recurrent_1999}
Rodriguez~P, Wiles~J, Elman~J~L.
A recurrent neural network that learns to count~[J].
Connection Science.
1999, 11~(1):  5--40.

\bibitem{cho_learning_2014}
Cho~K, Van~Merriënboer~B, Gulcehre~C, et~al.
Learning phrase representations using {RNN} encoder-decoder for statistical
  machine translation~[J].
arXiv preprint arXiv:1406.1078.
2014.

\bibitem{bahdanau_neural_2014}
Bahdanau~D, Cho~K, Bengio~Y.
Neural machine translation by jointly learning to align and translate~[J].
arXiv preprint arXiv:1409.0473.
2014.

\bibitem{hochreiter_long_1997}
Hochreiter~S, Schmidhuber~J.
Long short-term memory~[J].
Neural computation.
1997, 9~(8):  1735--1780.

\bibitem{kirkpatrick_optimization_1983}
Kirkpatrick~S, Gelatt~C~D, Vecchi~M~P.
Optimization by simulated annealing~[J].
science.
1983, 220~(4598):  671--680.

\bibitem{noauthor_gnu.org_nodate}
gnu.org.
\url{https://www.gnu.org/software/binutils/}.

\bibitem{chollet_keras:_2017}
Chollet~F.
keras: {Deep} {Learning} library for {Python}. {Runs} on {TensorFlow},
  {Theano}, or {CNTK}.
December 2017.
\url{https://github.com/fchollet/keras}.
original-date: 2015-03-28T00:35:42Z.

\bibitem{abadi_tensorflow:_2016}
Abadi~M, Agarwal~A, Barham~P, et~al.
Tensorflow: {Large}-scale machine learning on heterogeneous distributed
  systems~[J].
arXiv preprint arXiv:1603.04467.
2016.

\bibitem{kingma_adam:_2014}
Kingma~D, Ba~J.
Adam: {A} method for stochastic optimization~[J].
arXiv preprint arXiv:1412.6980.
2014.

\bibitem{noauthor_clang_nodate}
"clang" {C} {Language} {Family} {Frontend} for {LLVM}.
\url{https://clang.llvm.org/}.

\end{thebibliography}
